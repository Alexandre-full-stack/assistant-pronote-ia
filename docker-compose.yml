version: '3.8'

services:
  # Backend Python FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pronote-backend
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - HOST=0.0.0.0
      - ENV=development
      - DEBUG=True
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    env_file:
      - ./backend/.env
    depends_on:
      - redis
    volumes:
      - ./backend:/app
      - backend-logs:/app/logs
    restart: unless-stopped
    networks:
      - pronote-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis pour cache et sessions
  redis:
    image: redis:7-alpine
    container_name: pronote-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    restart: unless-stopped
    networks:
      - pronote-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis Commander (interface web pour debugger Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: pronote-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - pronote-network
    profiles:
      - debug

  # Frontend (serveur de d√©veloppement simple)
  frontend:
    image: nginx:alpine
    container_name: pronote-frontend
    ports:
      - "3000:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - pronote-network

networks:
  pronote-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  backend-logs:
    driver: local
